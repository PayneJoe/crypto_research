use crate::finite_field_arithmetic::bigint::BigInt;
use crate::finite_field_arithmetic::pairing_friendly::bls12::{fq::Fq, fq2::Fq2};
use crate::finite_field_arithmetic::pairing_friendly::cubic_extension::{
    CubicExtension, CubicExtensionConfig,
};

const NUM_LIMBS: usize = 6;

#[derive(Copy, Clone, Eq, PartialEq, Debug)]
pub struct Fq6Config;

impl CubicExtensionConfig<NUM_LIMBS> for Fq6Config {
    type BasePrimeField = Fq<NUM_LIMBS>;
    type BaseField = Fq2;
    type FrobCoeff = Fq2;

    // absolute degree of current (extension) field
    const DEGREE_OVER_BASE_PRIME_FIELD: usize = 6;

    // Fq12 = Fq6[w] / X^2 - gamma, where gamma = v
    // Fq6 = Fq2[v] / X^3 - beta, where beta = u + 1
    // Fq2 = Fq[u] / X^2 - alpha, where alpha = -1
    // beta = Fq2([1, 1])
    const NON_CUBIC_RESIDUAL: Self::BaseField = Fq2 {
        c0: Fq(BigInt([
            8505329371266088957,
            17002214543764226050,
            6865905132761471162,
            8632934651105793861,
            6631298214892334189,
            1582556514881692819,
        ])),
        c1: Fq(BigInt([
            8505329371266088957,
            17002214543764226050,
            6865905132761471162,
            8632934651105793861,
            6631298214892334189,
            1582556514881692819,
        ])),
    };

    // beta^{(p^d - 1)/3} for c1
    const FROBENIUS_COEFF_C1: &'static [Self::FrobCoeff] = &[
        Fq2 {
            c0: Fq(BigInt([
                8505329371266088957,
                17002214543764226050,
                6865905132761471162,
                8632934651105793861,
                6631298214892334189,
                1582556514881692819,
            ])),
            c1: Fq(BigInt([0, 0, 0, 0, 0, 0])),
        },
        Fq2 {
            c0: Fq(BigInt([0, 0, 0, 0, 0, 0])),
            c1: Fq(BigInt([
                14772873186050699377,
                6749526151121446354,
                6372666795664677781,
                10283423008382700446,
                286397964926079186,
                1796971870900422465,
            ])),
        },
        Fq2 {
            c0: Fq(BigInt([
                3526659474838938856,
                17562030475567847978,
                1632777218702014455,
                14009062335050482331,
                3906511377122991214,
                368068849512964448,
            ])),
            c1: Fq(BigInt([0, 0, 0, 0, 0, 0])),
        },
        Fq2 {
            c0: Fq(BigInt([0, 0, 0, 0, 0, 0])),
            c1: Fq(BigInt([
                8505329371266088957,
                17002214543764226050,
                6865905132761471162,
                8632934651105793861,
                6631298214892334189,
                1582556514881692819,
            ])),
        },
        Fq2 {
            c0: Fq(BigInt([
                14772873186050699377,
                6749526151121446354,
                6372666795664677781,
                10283423008382700446,
                286397964926079186,
                1796971870900422465,
            ])),
            c1: Fq(BigInt([0, 0, 0, 0, 0, 0])),
        },
        Fq2 {
            c0: Fq(BigInt([0, 0, 0, 0, 0, 0])),
            c1: Fq(BigInt([
                3526659474838938856,
                17562030475567847978,
                1632777218702014455,
                14009062335050482331,
                3906511377122991214,
                368068849512964448,
            ])),
        },
    ];
    // beta^{2 * (p^d - 1)/3} for c2
    const FROBENIUS_COEFF_C2: &'static [Self::FrobCoeff] = &[
        Fq2 {
            c0: Fq(BigInt([
                8505329371266088957,
                17002214543764226050,
                6865905132761471162,
                8632934651105793861,
                6631298214892334189,
                1582556514881692819,
            ])),
            c1: Fq(BigInt([0, 0, 0, 0, 0, 0])),
        },
        Fq2 {
            c0: Fq(BigInt([
                9875771541238924739,
                3094855109658912213,
                5802897354862067244,
                11677019699073781796,
                1505592401347711080,
                1505729768134575418,
            ])),
            c1: Fq(BigInt([0, 0, 0, 0, 0, 0])),
        },
        Fq2 {
            c0: Fq(BigInt([
                14772873186050699377,
                6749526151121446354,
                6372666795664677781,
                10283423008382700446,
                286397964926079186,
                1796971870900422465,
            ])),
            c1: Fq(BigInt([0, 0, 0, 0, 0, 0])),
        },
        Fq2 {
            c0: Fq(BigInt([
                4897101644811774638,
                3654671041462534141,
                569769440802610537,
                17053147383018470266,
                17227549637287919721,
                291242102765847046,
            ])),
            c1: Fq(BigInt([0, 0, 0, 0, 0, 0])),
        },
        Fq2 {
            c0: Fq(BigInt([
                3526659474838938856,
                17562030475567847978,
                1632777218702014455,
                14009062335050482331,
                3906511377122991214,
                368068849512964448,
            ])),
            c1: Fq(BigInt([0, 0, 0, 0, 0, 0])),
        },
        Fq2 {
            c0: Fq(BigInt([
                17076301903736715834,
                13907359434105313836,
                1063007777899403918,
                15402659025741563681,
                5125705813544623108,
                76826746747117401,
            ])),
            c1: Fq(BigInt([0, 0, 0, 0, 0, 0])),
        },
    ];

    fn multiply_frobenius_coeff(c1: &mut Self::BaseField, c2: &mut Self::BaseField, power: usize) {
        *c1 = *c1 * Self::FROBENIUS_COEFF_C1[power % Self::DEGREE_OVER_BASE_PRIME_FIELD];
        *c2 = *c2 * Self::FROBENIUS_COEFF_C2[power % Self::DEGREE_OVER_BASE_PRIME_FIELD];
    }
}

pub type Fq6 = CubicExtension<NUM_LIMBS, Fq6Config>;
impl Fq6 {}

mod tests {
    use std::str::FromStr;

    use crate::finite_field_arithmetic::pairing_friendly::field::Field;

    use super::*;
    #[test]
    fn test_addition() {
        let a= Fq6::from_base_prime_field_elems([
                Fq::from_str("2419032414666127634909010483744788729381301105052149524559188697821137954124206171391695937416827833700813968323735").unwrap(),
                Fq::from_str("1257965470428595776887056386947557933712889964126207089017264670790370915804587304924891795924962152951420048517018").unwrap(),
                Fq::from_str("918066286022317645711337475775307360320133211592518727275153588683777431982024797211298163268821684563077120634517").unwrap(),
                Fq::from_str("1790307220472801502822439940053118219430080842149955398512409224824978427587319346490069630901053419321045680277949").unwrap(),
                Fq::from_str("3201288747545084564791070916624835688042910036064555142597269914647222444735942315921472896742288368851776760817258").unwrap(),
                Fq::from_str("1329479409687596509635306688388696731668357934481183567847188803433441520681334963367720014161724377637335968693114").unwrap(),
        ]).unwrap();
        let b= Fq6::from_base_prime_field_elems([
                Fq::from_str("183508211157689076179088344497652671383133573378504621333183927753430493135462295774172006805213598643971905523874").unwrap(),
                Fq::from_str("3405763764478444824056845456512824458558997738842306494170858471315470430777481209811719910130967628070896551403832").unwrap(),
                Fq::from_str("1268953948384349527923453523467686111029710473486615140985443722772051812203962573304333601982208240801482290636539").unwrap(),
                Fq::from_str("3933151276269283056251320232098473422705979192195061466027441998088699827960377631786905524973506446447645789312475").unwrap(),
                Fq::from_str("678775787517486199785868914694700000318670258022060290670007268030908361724603588905111959988045186716390600210568").unwrap(),
                Fq::from_str("3673017804663088489330518678669627995997853263725539562863839553834116670509558989482126814884511731353081050756899").unwrap(),
        ]).unwrap();
        let c= Fq6::from_base_prime_field_elems([
                Fq::from_str("2602540625823816711088098828242441400764434678430654145892372625574568447259668467165867944222041432344785873847609").unwrap(),
                Fq::from_str("661319679685373207526112017724478235715004883029505697856065005981809696091230650293924076926914116984422327361063").unwrap(),
                Fq::from_str("2187020234406667173634790999242993471349843685079133868260597311455829244185987370515631765251029925364559411271056").unwrap(),
                Fq::from_str("1721048941520417165655970346415687485579177214406008979207793086789646605056859113834287526745544201730797197030637").unwrap(),
                Fq::from_str("3880064535062570764576939831319535688361580294086615433267277182678130806460545904826584856730333555568167361027826").unwrap(),
                Fq::from_str("1000087659129017605548035541322420571109328378267715245378970221143526540700056088407159199917220444952522746890226").unwrap(),
        ]).unwrap();
        assert_eq!(a + b, c);
    }

    #[test]
    fn test_substraction() {
        let a= Fq6::from_base_prime_field_elems([
            Fq::from_str("2419032414666127634909010483744788729381301105052149524559188697821137954124206171391695937416827833700813968323735").unwrap(),
            Fq::from_str("1257965470428595776887056386947557933712889964126207089017264670790370915804587304924891795924962152951420048517018").unwrap(),
            Fq::from_str("918066286022317645711337475775307360320133211592518727275153588683777431982024797211298163268821684563077120634517").unwrap(),
            Fq::from_str("1790307220472801502822439940053118219430080842149955398512409224824978427587319346490069630901053419321045680277949").unwrap(),
            Fq::from_str("3201288747545084564791070916624835688042910036064555142597269914647222444735942315921472896742288368851776760817258").unwrap(),
            Fq::from_str("1329479409687596509635306688388696731668357934481183567847188803433441520681334963367720014161724377637335968693114").unwrap(),
        ]).unwrap();
        let b= Fq6::from_base_prime_field_elems([
            Fq::from_str("183508211157689076179088344497652671383133573378504621333183927753430493135462295774172006805213598643971905523874").unwrap(),
            Fq::from_str("3405763764478444824056845456512824458558997738842306494170858471315470430777481209811719910130967628070896551403832").unwrap(),
            Fq::from_str("1268953948384349527923453523467686111029710473486615140985443722772051812203962573304333601982208240801482290636539").unwrap(),
            Fq::from_str("3933151276269283056251320232098473422705979192195061466027441998088699827960377631786905524973506446447645789312475").unwrap(),
            Fq::from_str("678775787517486199785868914694700000318670258022060290670007268030908361724603588905111959988045186716390600210568").unwrap(),
            Fq::from_str("3673017804663088489330518678669627995997853263725539562863839553834116670509558989482126814884511731353081050756899").unwrap(),
        ]).unwrap();
        let c= Fq6::from_base_prime_field_elems([
            Fq::from_str("2235524203508438558729922139247136057998167531673644903226004770067707460988743875617523930611614235056842062799861").unwrap(),
            Fq::from_str("1854611261171818346248000756170637631710775045222908480178464335598932135517943959555859514923010188918417769672973").unwrap(),
            Fq::from_str("3651521892859635511205673778043525405847305558044911471621768002035757270268900088349652190415629107799489102557765").unwrap(),
            Fq::from_str("1859565499425185839988909533690548953280984469893901817817025362860310250117779579145851735056562636911294163525261").unwrap(),
            Fq::from_str("2522512960027598365005202001930135687724239778042494851927262646616314083011338727016360936754243182135386160606690").unwrap(),
            Fq::from_str("1658871160246175413722577835454972892227387490694651890315407385723356500662613838328280828406228310322149190496002").unwrap(),
        ]).unwrap();
        assert_eq!(a - b, c);
    }

    #[test]
    fn test_multiplication() {
        let a= Fq6::from_base_prime_field_elems([
            Fq::from_str("2419032414666127634909010483744788729381301105052149524559188697821137954124206171391695937416827833700813968323735").unwrap(),
            Fq::from_str("1257965470428595776887056386947557933712889964126207089017264670790370915804587304924891795924962152951420048517018").unwrap(),
            Fq::from_str("918066286022317645711337475775307360320133211592518727275153588683777431982024797211298163268821684563077120634517").unwrap(),
            Fq::from_str("1790307220472801502822439940053118219430080842149955398512409224824978427587319346490069630901053419321045680277949").unwrap(),
            Fq::from_str("3201288747545084564791070916624835688042910036064555142597269914647222444735942315921472896742288368851776760817258").unwrap(),
            Fq::from_str("1329479409687596509635306688388696731668357934481183567847188803433441520681334963367720014161724377637335968693114").unwrap(),
        ]).unwrap();
        let b= Fq6::from_base_prime_field_elems([
            Fq::from_str("183508211157689076179088344497652671383133573378504621333183927753430493135462295774172006805213598643971905523874").unwrap(),
            Fq::from_str("3405763764478444824056845456512824458558997738842306494170858471315470430777481209811719910130967628070896551403832").unwrap(),
            Fq::from_str("1268953948384349527923453523467686111029710473486615140985443722772051812203962573304333601982208240801482290636539").unwrap(),
            Fq::from_str("3933151276269283056251320232098473422705979192195061466027441998088699827960377631786905524973506446447645789312475").unwrap(),
            Fq::from_str("678775787517486199785868914694700000318670258022060290670007268030908361724603588905111959988045186716390600210568").unwrap(),
            Fq::from_str("3673017804663088489330518678669627995997853263725539562863839553834116670509558989482126814884511731353081050756899").unwrap(),
        ]).unwrap();
        let c= Fq6::from_base_prime_field_elems([
            Fq::from_str("1096752695409842571321592030514201605884969262644178153101314145130236874172430446281637979096685124779794765162128").unwrap(),
            Fq::from_str("2849304267876877451485521686647797883136840564455136984107959394117983307774547181933487493746562227432756918371097").unwrap(),
            Fq::from_str("3607770038833495406651103710496219643912308820993928411644692855596325806526139398155619604721921435037864860431471").unwrap(),
            Fq::from_str("3097360748844089721974058378028556771362584799703890185281876480140729739515794659010835487589687507552580376538099").unwrap(),
            Fq::from_str("2852656451929920890798085851214378187935118121846703868485186521878482004162805475266159347483507925239167296574851").unwrap(),
            Fq::from_str("3340324464407607051129030213531171921853508018024651568207759178755328625704033741991729431752260185857819275051081").unwrap(),
        ]).unwrap();
        assert_eq!(a * b, c);
    }

    #[test]
    fn test_division() {
        let a= Fq6::from_base_prime_field_elems([
            Fq::from_str("2419032414666127634909010483744788729381301105052149524559188697821137954124206171391695937416827833700813968323735").unwrap(),
            Fq::from_str("1257965470428595776887056386947557933712889964126207089017264670790370915804587304924891795924962152951420048517018").unwrap(),
            Fq::from_str("918066286022317645711337475775307360320133211592518727275153588683777431982024797211298163268821684563077120634517").unwrap(),
            Fq::from_str("1790307220472801502822439940053118219430080842149955398512409224824978427587319346490069630901053419321045680277949").unwrap(),
            Fq::from_str("3201288747545084564791070916624835688042910036064555142597269914647222444735942315921472896742288368851776760817258").unwrap(),
            Fq::from_str("1329479409687596509635306688388696731668357934481183567847188803433441520681334963367720014161724377637335968693114").unwrap(),
        ]).unwrap();
        let b= Fq6::from_base_prime_field_elems([
            Fq::from_str("183508211157689076179088344497652671383133573378504621333183927753430493135462295774172006805213598643971905523874").unwrap(),
            Fq::from_str("3405763764478444824056845456512824458558997738842306494170858471315470430777481209811719910130967628070896551403832").unwrap(),
            Fq::from_str("1268953948384349527923453523467686111029710473486615140985443722772051812203962573304333601982208240801482290636539").unwrap(),
            Fq::from_str("3933151276269283056251320232098473422705979192195061466027441998088699827960377631786905524973506446447645789312475").unwrap(),
            Fq::from_str("678775787517486199785868914694700000318670258022060290670007268030908361724603588905111959988045186716390600210568").unwrap(),
            Fq::from_str("3673017804663088489330518678669627995997853263725539562863839553834116670509558989482126814884511731353081050756899").unwrap(),
        ]).unwrap();
        let c= Fq6::from_base_prime_field_elems([
            Fq::from_str("2194663503670191569353776634648343640339028585110227628456486525724008890480420456767922811581753748435644157329819").unwrap(),
            Fq::from_str("2667542380594401692699889833290167375807208675544772328370687595486232657017637816931110968243988775622220136086734").unwrap(),
            Fq::from_str("724380149834059733583975236732420817647415320833106314285565765932920909777437396347045829772694253162623554139026").unwrap(),
            Fq::from_str("1764233411778966718293572659431327449886491955932156701647309289819480959273856470564521936939864954566897794617457").unwrap(),
            Fq::from_str("1793362281894016485767677293856358385007986549424811603415525497779132513127390827278268953890200266626547552134819").unwrap(),
            Fq::from_str("2114429668712750178110191878619133009301216946970830520578804323391791061402253438949299276348282547179754236666113").unwrap(),
        ]).unwrap();
        assert_eq!(a / b, c);
    }

    #[test]
    fn test_square() {
        let a= Fq6::from_base_prime_field_elems([
            Fq::from_str("2419032414666127634909010483744788729381301105052149524559188697821137954124206171391695937416827833700813968323735").unwrap(),
            Fq::from_str("1257965470428595776887056386947557933712889964126207089017264670790370915804587304924891795924962152951420048517018").unwrap(),
            Fq::from_str("918066286022317645711337475775307360320133211592518727275153588683777431982024797211298163268821684563077120634517").unwrap(),
            Fq::from_str("1790307220472801502822439940053118219430080842149955398512409224824978427587319346490069630901053419321045680277949").unwrap(),
            Fq::from_str("3201288747545084564791070916624835688042910036064555142597269914647222444735942315921472896742288368851776760817258").unwrap(),
            Fq::from_str("1329479409687596509635306688388696731668357934481183567847188803433441520681334963367720014161724377637335968693114").unwrap(),
        ]).unwrap();
        let c = Fq6::from_base_prime_field_elems([
            Fq::from_str("735943782279999141988886436555269926404228363376505564348538425667309757167919920185181204233879901662305474773396").unwrap(),
            Fq::from_str("3531959925721341248568497208954455458588565986909139245214021894194470012196184287461974573345790035973607425003870").unwrap(),
            Fq::from_str("1136363343508770657730832810728340441918024229986347794142714466482394183168630538708883244678035745923324255290589").unwrap(),
            Fq::from_str("98840922592805944431637720028135034740918141693043325213393495242996261899886520478193487412567787059735970165102").unwrap(),
            Fq::from_str("1828008154154347850958790214646620814477174082220337109344802927248746064640702693347963400679421432626743921297185").unwrap(),
            Fq::from_str("1984484791801671458313597441248137933988256545196002564564088964126603784854644904314402276529174420148068715044777").unwrap(),
        ])
        .unwrap();
        assert_eq!(a.square(), c);
    }

    #[test]
    fn test_frobenius_map() {
        let mut a= Fq6::from_base_prime_field_elems([
            Fq::from_str("2419032414666127634909010483744788729381301105052149524559188697821137954124206171391695937416827833700813968323735").unwrap(),
            Fq::from_str("1257965470428595776887056386947557933712889964126207089017264670790370915804587304924891795924962152951420048517018").unwrap(),
            Fq::from_str("918066286022317645711337475775307360320133211592518727275153588683777431982024797211298163268821684563077120634517").unwrap(),
            Fq::from_str("1790307220472801502822439940053118219430080842149955398512409224824978427587319346490069630901053419321045680277949").unwrap(),
            Fq::from_str("3201288747545084564791070916624835688042910036064555142597269914647222444735942315921472896742288368851776760817258").unwrap(),
            Fq::from_str("1329479409687596509635306688388696731668357934481183567847188803433441520681334963367720014161724377637335968693114").unwrap(),
        ]).unwrap();

        let c = vec![
            a.clone(),
            Fq6::from_base_prime_field_elems([
                Fq::from_str("2419032414666127634909010483744788729381301105052149524559188697821137954124206171391695937416827833700813968323735").unwrap(),
                Fq::from_str("2744444084793071616530733438788346222843992855812800796314793465333660734686250559517795833204053511086474224042769").unwrap(),
                Fq::from_str("2191650887555524409600441002271436834640109695572818222945716373000607691895277285778904178213822676088021948274465").unwrap(),
                Fq::from_str("3293075980766974967190764487394067600860388216588765678890010030040003195839989427972103262345984717195253077436978").unwrap(),
                Fq::from_str("1809074032671355789161456408219984679195413760069382493954892298094707841837813694042367950854501024499999528509738").unwrap(),
                Fq::from_str("3124946682977665978630114780756052718039271036474547605435300758790873967549364128495318848189106400378473061840914").unwrap(),
            ])
            .unwrap(),
            Fq6::from_base_prime_field_elems([
                Fq::from_str("2419032414666127634909010483744788729381301105052149524559188697821137954124206171391695937416827833700813968323735").unwrap(),
                Fq::from_str("1257965470428595776887056386947557933712889964126207089017264670790370915804587304924891795924962152951420048517018").unwrap(),
                Fq::from_str("3793676843654042173933477688302433351933244211696731364498952653524282673159661503701973832643224926317458347048079").unwrap(),
                Fq::from_str("20451447193341480994908883411349102486692282216234263873932538298445531008241232173713820014139568628826644007373").unwrap(),
                Fq::from_str("2610194840347938617788175317331053147709386543943835236689680519571517047592709242563582683241228319686117040252267").unwrap(),
                Fq::from_str("3550393017778072298570158182327058863406136668922284597381626710023747812750976637022336395907200550059979514585546").unwrap(),
            ])
            .unwrap(),
            Fq6::from_base_prime_field_elems([
                Fq::from_str("2419032414666127634909010483744788729381301105052149524559188697821137954124206171391695937416827833700813968323735").unwrap(),
                Fq::from_str("2744444084793071616530733438788346222843992855812800796314793465333660734686250559517795833204053511086474224042769").unwrap(),
                Fq::from_str("1790307220472801502822439940053118219430080842149955398512409224824978427587319346490069630901053419321045680277949").unwrap(),
                Fq::from_str("918066286022317645711337475775307360320133211592518727275153588683777431982024797211298163268821684563077120634517").unwrap(),
                Fq::from_str("801120807676582828626718909111068468513972783874452742734788221476809205754895548521214732386727295186117511742529").unwrap(),
                Fq::from_str("1329479409687596509635306688388696731668357934481183567847188803433441520681334963367720014161724377637335968693114").unwrap(),
            ])
            .unwrap(),
            Fq6::from_base_prime_field_elems([
                Fq::from_str("2419032414666127634909010483744788729381301105052149524559188697821137954124206171391695937416827833700813968323735").unwrap(),
                Fq::from_str("1257965470428595776887056386947557933712889964126207089017264670790370915804587304924891795924962152951420048517018").unwrap(),
                Fq::from_str("3293075980766974967190764487394067600860388216588765678890010030040003195839989427972103262345984717195253077436978").unwrap(),
                Fq::from_str("2191650887555524409600441002271436834640109695572818222945716373000607691895277285778904178213822676088021948274465").unwrap(),
                Fq::from_str("2193335522550311604256333417515919477361469059869625391377165838029323808653024170400319678274514639537894744050049").unwrap(),
                Fq::from_str("3124946682977665978630114780756052718039271036474547605435300758790873967549364128495318848189106400378473061840914").unwrap(),
            ])
            .unwrap(),
            Fq6::from_base_prime_field_elems([
                Fq::from_str("2419032414666127634909010483744788729381301105052149524559188697821137954124206171391695937416827833700813968323735").unwrap(),
                Fq::from_str("2744444084793071616530733438788346222843992855812800796314793465333660734686250559517795833204053511086474224042769").unwrap(),
                Fq::from_str("20451447193341480994908883411349102486692282216234263873932538298445531008241232173713820014139568628826644007373").unwrap(),
                Fq::from_str("3793676843654042173933477688302433351933244211696731364498952653524282673159661503701973832643224926317458347048079").unwrap(),
                Fq::from_str("1392214714873728775629614508404851008847496275995172648642377616552514602898128621879104945887787344351777232307520").unwrap(),
                Fq::from_str("3550393017778072298570158182327058863406136668922284597381626710023747812750976637022336395907200550059979514585546").unwrap(),
            ])
            .unwrap(),
        ];

        for i in 1..7 {
            a.powers_frobenius_map_inplace(1);
            assert_eq!(a, c[i % 6]);
            println!("phi(a)^{} passed!", i);
        }
    }
}
